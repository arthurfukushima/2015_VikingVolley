///////////////////////////////////////////////////////////
//  BasePanel.cs
//  Implementation of the Class BasePanel
//  Generated by Enterprise Architect
//  Created on:      19-dez-2014 14:59:43
//  Original author: Hugo
///////////////////////////////////////////////////////////



using UnityEngine;
using CoreUI;
using System.Collections.Generic;


namespace CoreUI
{
    /// <summary>
    /// A panel is like a page that  overs all parts of the screen.
    /// </summary>
    public class BasePanel : BaseAnimatedUI
    {
        private List<BaseAnimatedUI> m_pSubUIs = new List<BaseAnimatedUI>();

        /// <summary>
        /// this will register those sub-events to be called after parent's call
        /// - Show
        /// - Close
        /// - OnShow
        /// - OnClose
        /// </summary>
        /// <param name="pUI"></param>
        public void RegisterSubUI(BaseAnimatedUI pUI)
        {
            if (!m_pSubUIs.Contains(pUI))
            {
                //Debug.Log("RegisterSubUI added: " + (pUI == null ? "null" : pUI.name));
                m_pSubUIs.Add(pUI);
            }
        }

        public override void Show(OnUICompleteEvent pOnShow = null)
        {
            base.Show(pOnShow);
            for (int i = 0; i < m_pSubUIs.Count; i++)
                m_pSubUIs[i].Show();
        }

        public override void Close(OnUICompleteEvent pOnClose = null)
        {
            base.Close(pOnClose);
            for (int i = 0; i < m_pSubUIs.Count; i++)
                m_pSubUIs[i].Close();
        }
        public override void OnShow()
        {
            base.OnShow();
            for (int i = 0; i < m_pSubUIs.Count; i++)
                m_pSubUIs[i].OnShow();
        }
        public override void OnClose()
        {
            base.OnClose();
            for (int i = 0; i < m_pSubUIs.Count; i++)
                m_pSubUIs[i].OnClose();
        }

        public override bool IsPage()
        {
            return true;
        }

    }//end BasePanel

}//end namespace CoreUI
///////////////////////////////////////////////////////////
//  BaseUI.cs
//  Implementation of the Class BaseUI
//  Generated by Enterprise Architect
//  Created on:      19-dez-2014 14:59:14
//  Original author: Hugo
///////////////////////////////////////////////////////////



using UnityEngine;
using CoreUI;
namespace CoreUI
{
    /// <summary>
    /// A Base UI
    /// </summary>
    public class BaseUI : BaseMonoBehaviour, IBaseUI
    {

        [SerializeField]
        private GameObject m_pRootGameObject;

        protected OnUICompleteEvent m_pOnShowEvent;
        protected OnUICompleteEvent m_pOnCloseEvent;

        private Vector2 m_pAwakePosition;


        #region accessors

        public Vector2 AwakePosition
        {
            get { return m_pAwakePosition; }
        }
        public GameObject GO
        {
            get { return m_pRootGameObject; }
        }

        #endregion



        protected virtual void Reset()
        {
            m_pRootGameObject = gameObject;
        }

        virtual protected void Awake()
        {
            m_pAwakePosition = Position;// RectTransform.position;
        }

        protected virtual void Start()
        {
        }


        /// 
        /// <param name="OnShow"></param>
        public virtual void Show(OnUICompleteEvent pOnShow = null)
        {
            SetVisible(true);
            m_pOnShowEvent = pOnShow;
            NotifyOpen();
            OnShow();
        }

        /// 
        /// <param name="OnClose"></param>
        public virtual void Close(OnUICompleteEvent pOnClose = null)
        {
            SetVisible(false);
            m_pOnCloseEvent = pOnClose;
            NotifyClose();
            OnClose();
        }


        public virtual void OnShow()
        {
            if (m_pOnShowEvent != null)
                m_pOnShowEvent(this);
            m_pOnShowEvent = null;
        }

        public virtual void OnClose()
        {
            if (m_pOnCloseEvent != null)
                m_pOnCloseEvent(this);
            m_pOnCloseEvent = null;
        }


        /// <summary>
        /// hide means change it's visibility
        /// </summary>
        /// <param name="bVisible"></param>
        public virtual void SetVisible(bool bVisible)
        {
            GO.SetActive(bVisible);
        }


        /// <summary>
        /// checks if the UI is openned. If the UI is in transition/animation, it's still openned.
        /// </summary>
        /// <returns></returns>
        public bool IsVisible()
        {
            return GO.activeSelf;
        }

        /// <summary>
        /// check if the UI can be interacted with user
        /// </summary>
        /// <returns></returns>
        public virtual bool IsWorking()
        {
            return IsVisible();
        }

        /// <summary>
        /// used for analytics purpoises.
        ///  when open a page, it will log an event saying about current screen
        /// </summary>
        /// <returns> false by default</returns>
        public virtual bool IsPage()
        {
            return false;
        }

        protected void NotifyOpen()
        {
            UIManager.GetInstance().NotifyOpen(this);
        }
        protected void NotifyClose()
        {
            UIManager.GetInstance().NotifyClose(this);
        }
    }//end BaseUI

}//end namespace CoreUI